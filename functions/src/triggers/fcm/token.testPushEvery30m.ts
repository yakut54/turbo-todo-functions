import { onSchedule } from 'firebase-functions/v2/scheduler'
import { logger } from 'firebase-functions'
import { sendPushToUser } from 'src/lib'
import { User } from 'src/types/models/todo-model'
import { firestore } from 'src/lib/firebaseAdmin'

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏).
 */
export const testPushEvery30m = onSchedule(
  {
    schedule: '30 16 * * *',
    timeZone: 'Etc/UTC',
    region: 'europe-central2',
    timeoutSeconds: 60,
    memory: '256MiB',
  },
  async () => {
    const usersSnapshot = await firestore.collection('users').get()

    const pushPromises = usersSnapshot.docs
      .filter((doc) => doc.data().is_enabled_notifications === true)
      .map(async (doc) => {
        const userData: Partial<User> = doc.data()
        const userName = userData.display_name || 'Anonymous'

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.log(`üîî –¢–µ—Å—Ç–æ–≤—ã–π –ø—É—à –¥–ª—è ${userName} (${doc.id}) ‚Äî \n14:30 NSK 154`)

        return sendPushToUser(
          doc.id,
          '1234567890 1234567890 1234567890 1234567890 ---',
          '–±–∞–±–∞—Ö!!',
        )
      })

    const results = await Promise.allSettled(pushPromises)
    const successfulCount = results.filter((result) => result.status === 'fulfilled').length

    logger.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successfulCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${pushPromises.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!`)
  },
)
